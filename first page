import tkinter as tk
from PIL import Image, ImageTk, ImageDraw

# --- Main Application Class ---
class LitLoomApp(tk.Tk):
    """
    An improved Tkinter application that replicates the LitLoom webpage design,
    featuring a welcome screen with a button and navigation to a second page.
    This version is optimized to prevent lag on resize.
    """
    def __init__(self):
        super().__init__()

        # --- Window Configuration ---
        self.title("â—† LitLoom")
        self.geometry("800x600")
        self.minsize(600, 450) # Set a minimum size

        # --- Page State Management ---
        self.current_page = "welcome"

        # --- Optimization for Resizing ---
        self.resize_job_id = None

        # --- Button Colors for Animation ---
        self.button_bg_color = "#A6876D"
        self.button_hover_color = "#92755E" # A slightly darker shade for the hover effect

        # --- Image Loading ---
        self.original_fg_image = None
        self.original_bg_image = None
        self.fg_photo = None # PhotoImage for the foreground
        self.bg_photo = None # PhotoImage for the background
        self.overlay_photo = None # PhotoImage for the transparent overlay

        try:
            # Load the main image (person reading)
            self.original_fg_image = Image.open("background.jpeg")
        except FileNotFoundError:
            print("Error: 'background.jpeg' (foreground image) not found.")

        try:
            # Load the background texture image
            self.original_bg_image = Image.open("bg.jpeg")
        except FileNotFoundError:
            print("Error: 'bg.jpeg' (background image) not found.")
        
        # --- Canvas Setup ---
        # The canvas will cover the entire window.
        self.canvas = tk.Canvas(self, highlightthickness=0)
        self.canvas.pack(fill="both", expand=True)

        # --- Event Binding ---
        # Redraw the canvas content when the window is resized.
        self.bind("<Configure>", self.handle_resize)
        # Bind mouse events for the button
        self.canvas.tag_bind("button", "<Button-1>", self.go_to_next_page)
        self.canvas.tag_bind("button", "<Enter>", self.on_button_hover)
        self.canvas.tag_bind("button", "<Leave>", self.on_button_leave)


    def go_to_next_page(self, event=None):
        """Switches to the blank next page and redraws the screen."""
        self.current_page = "next"
        # Trigger a redraw to show the new page
        self.redraw_canvas()

    def on_button_hover(self, event=None):
        """Changes the cursor and animates the button on hover."""
        self.config(cursor="hand2")
        # Move the button down and to the right by 2 pixels to simulate a press
        self.canvas.move("button", 2, 2)
        # Change the button background color to the darker hover shade
        self.canvas.itemconfig("button_bg", fill=self.button_hover_color)


    def on_button_leave(self, event=None):
        """Changes the cursor and reverts button animation on leave."""
        self.config(cursor="")
        # Move the button back to its original position
        self.canvas.move("button", -2, -2)
        # Revert the button background color
        self.canvas.itemconfig("button_bg", fill=self.button_bg_color)

    def add_rounded_corners(self, img, radius):
        """Applies rounded corners to a PIL Image."""
        # Create a mask image
        mask = Image.new('L', img.size, 0)
        draw = ImageDraw.Draw(mask)
        draw.rounded_rectangle((0, 0) + img.size, radius=radius, fill=255)
        # Apply the mask to the original image's alpha channel
        img.putalpha(mask)
        return img
        
    def draw_rounded_rectangle(self, x1, y1, x2, y2, radius, **kwargs):
        """Draws a rounded rectangle on the canvas."""
        points = [
            x1 + radius, y1, x2 - radius, y1, x2, y1, x2, y1 + radius,
            x2, y2 - radius, x2, y2, x2 - radius, y2, x1 + radius, y2,
            x1, y2, x1, y2 - radius, x1, y1 + radius, x1, y1
        ]
        return self.canvas.create_polygon(points, **kwargs, smooth=True)

    def handle_resize(self, event):
        """
        Schedules a redraw after a brief delay to prevent lag.
        This is a 'debounce' function.
        """
        # If there's a pending redraw job, cancel it
        if self.resize_job_id:
            self.after_cancel(self.resize_job_id)
        
        # Schedule the actual redraw to happen in 50 milliseconds
        self.resize_job_id = self.after(50, self.redraw_canvas)

    def redraw_canvas(self):
        """Handles the actual redrawing of the canvas content."""
        if self.current_page == "welcome":
            self.draw_welcome_page()
        elif self.current_page == "next":
            self.draw_next_page()
            
    def draw_background(self):
        """Draws the tiled background image for the welcome page."""
        win_width = self.winfo_width()
        win_height = self.winfo_height()
        
        if self.original_bg_image:
            bg_img_resized = self.original_bg_image.resize((win_width, win_height), Image.Resampling.LANCZOS)
            self.bg_photo = ImageTk.PhotoImage(bg_img_resized)
            self.canvas.create_image(0, 0, image=self.bg_photo, anchor="nw")
        else:
            self.canvas.configure(bg="#FDFDFD")

    def draw_next_page(self):
        """Draws the blank second page with a white background."""
        self.canvas.delete("all")
        # Set the background to white for this page
        self.canvas.configure(bg="white")
        # You can add content for the next page here if needed
        self.canvas.create_text(
            self.winfo_width() / 2,
            self.winfo_height() / 2,
            text="Welcome to the next page!",
            font=("Helvetica", 24, "bold"),
            fill="#333333"
        )
        
    def draw_welcome_page(self):
        """Draws the initial welcome screen with image and button."""
        self.canvas.delete("all")
        win_width = self.winfo_width()
        win_height = self.winfo_height()

        # --- 1. Draw Background ---
        self.draw_background()

        # --- 2. Draw Foreground Image ---
        if not self.original_fg_image:
            self.canvas.create_text(win_width / 2, win_height / 2, text="Foreground image not found", font=("Arial", 14), fill="red")
            return
            
        fg_img_width = win_width * 0.8
        fg_img_height = win_height * 0.7
        fg_img = self.original_fg_image.copy()
        fg_img.thumbnail((fg_img_width, fg_img_height), Image.Resampling.LANCZOS)
        fg_img_rounded = self.add_rounded_corners(fg_img.copy(), 25)
        self.fg_photo = ImageTk.PhotoImage(fg_img_rounded)
        self.canvas.create_image(win_width / 2, win_height / 2, image=self.fg_photo)

        # --- 3. Create and Draw Semi-Transparent Overlay ---
        # Create a new image for the overlay with an alpha channel for transparency
        overlay = Image.new('RGBA', fg_img.size, (255, 255, 255, 0))
        draw = ImageDraw.Draw(overlay)
        # The color tuple includes the alpha value (180 out of 255) for semi-transparency
        draw.rounded_rectangle((0, 0, fg_img.width, fg_img.height), radius=25, fill=(255, 255, 255, 180))
        self.overlay_photo = ImageTk.PhotoImage(overlay)
        self.canvas.create_image(win_width / 2, win_height / 2, image=self.overlay_photo)


        # --- 4. Draw the "Let's Go!" Button (ON TOP OF EVERYTHING ELSE) ---
        button_width = 200
        button_height = 50
        btn_center_x = win_width / 2
        btn_center_y = win_height / 2
        btn_x1 = btn_center_x - button_width / 2
        btn_y1 = btn_center_y - button_height / 2
        btn_x2 = btn_x1 + button_width
        btn_y2 = btn_y1 + button_height
        
        # Draw the button background shape using two tags for specific control
        self.draw_rounded_rectangle(
            btn_x1, btn_y1, btn_x2, btn_y2,
            radius=25, fill=self.button_bg_color, outline="", tags=("button", "button_bg")
        )
        
        # Draw the button text
        self.canvas.create_text(
            btn_center_x, btn_center_y,
            text="Let's Go!", font=("Helvetica", 16, "bold"), fill="white", tags="button" 
        )

# --- Running the Application ---
if __name__ == "__main__":
    app = LitLoomApp()
    app.mainloop()
